#!/bin/bash
set -eo pipefail

[ -z "$CFG_DIR" ] && CFG_DIR=$HOME/.oc-select
[ -z "$BIN_DIR" ] && BIN_DIR=$HOME/.local/bin
RELEASES="$CFG_DIR/releases"

die() { echo -e "$*" 1>&2 ; exit 1; }

function usage() {
    echo "oc-select <command>|<version>"
    echo "-----------------------------------------"
    echo "help               show usage information"
    echo "update             update version cache"
    echo "list               list all versions"
    echo "path <version>     print oc path"
    echo "<version>          switch to oc <version>"
}

function update() {
    mkdir -p "$CFG_DIR"
    wget -qO "$CFG_DIR/releases" https://api.github.com/repos/openshift/origin/releases
}

function need_update() {
    [[ ! -e "$RELEASES" ]] || [[ $(find "$RELEASES" -type f -mtime +13 -print) ]]
}

function build_release_info() {
    for v in 4.{7..1} ; do
      echo "v$v oc https://mirror.openshift.com/pub/openshift-v4/clients/oc/$v/linux/oc.tar.gz 0"
    done
    jq -r '.[] | . as $release | select(.name | test("alpha|rc|v1.[234]") | not) | .assets[] | select(.name | test("client.*linux.*64")) | $release.name+" "+.name+" "+.browser_download_url+" 1"' < "$RELEASES"
}

function list_releases() {
    if need_update ; then
        update
    fi
    RELINFO=$(build_release_info)

    IFS=$'\n'
    for rel in $RELINFO; do
        IFS=$' '
        read -r -a r <<< "$rel"
        version=${r[0]}
        download_url=${r[2]}
        target_dir="$CFG_DIR/$version"
        info="not installed"
        if [ -e "$target_dir/oc" ]; then
            info="available"
        fi
        if [ "$(readlink "$BIN_DIR/oc")" == "$target_dir/oc" ]; then
            info="current"
        fi
        echo "$version ($info)"
    done
}

function get_path() {
    if need_update ; then
        update
    fi
    RELINFO=$(build_release_info)

    IFS=$'\n'
    for rel in $RELINFO; do
        IFS=$' '
        read -r -a r <<< "$rel"
        version=${r[0]}
        if [[ "$version" == *"$1"* ]]; then
            download_url=${r[2]}
            strip_components=${r[3]}
            target_dir="$CFG_DIR/$version"
            if [ ! -e "$target_dir/oc" ]; then
                echo "downloading $download_url" 1>&2
                mkdir -p "$target_dir"
                curl -sSL "$download_url" | tar xz --warning=no-unknown-keyword --strip-components="$strip_components" -C "$target_dir"
            fi

            echo "$target_dir"
            return 0
        fi
    done
    return 1
}

function use_release() {
    target_dir=$(get_path "$1") && ln -fs "$target_dir/oc" "$BIN_DIR/oc"
}

if [ "$1" == "" ]; then
    usage
    exit 0
fi

case "$1" in
    help) usage ;;
    update) update ;;
    list) list_releases ;;
    path) get_path "$2";;
    *) use_release "$1" || die "command or version '$1' not found. try 'oc-select help' for available commands" ;;
esac
